#!/bin/bash

# set -x

# Development: root of the sources
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
ENDORSE_SRC_ROOT="$SCRIPTPATH/.."
ENDORSE_SRC_BAYES="${ENDORSE_SRC_ROOT}/src/endorse/bayes_orig"
ENDORSE_VENV_BAYES="${ENDORSE_SRC_ROOT}/venv"

run=false
visualize=false
report=false
set=false

debug=false
clean=""

#obligatory_param=0
while getopts ":hdt:n:o:p:x:s:c" opt; do
  case $opt in
    h)
      # help
      echo "Usage: ./run_all_metacentrum.sh -t <TASK> -n <N_CHAINS> -o <OUTPUT_DIR> -p <PARAMS> -c -d"
      echo "-t ... 'run' or 'visualize' or 'report'"
      echo "       - run:       runs the Bayes inversion (sampling, visualization)"
      echo "                    (PBS, inside container)"
      echo "       - visualize: runs visualization (locally, inside container)"
      echo "                    valid options: n, o"
      echo "       - report:    runs outside container, needs Python and LaTeX"
      echo "                    valid option: o"
      echo "       - set:       runs set of Flow123d samples"
      echo "                    valid option: o, p, x, s"
      echo "-p ... number of best fits (L2) or csv file with parameters"
      echo "-c ... cleans the <OUTPUT_DIR> at first"
      echo "-d ... only print the container command"
      exit 0
      ;;
    d)
      # debug
      debug=true
      ;;
    n)
      # number of Markov chains
      n_chains=$OPTARG
#      ((obligatory_param=obligatory_param+1))
      ;;
    o)
      # output directory
      output_dir=$OPTARG
#      ((obligatory_param=obligatory_param+1))
      ;;
    t)
      # task
      comm=$OPTARG
      if [ "$comm" == "visualize" ]; then
        visualize=true
      elif [ "$comm" == "run" ]; then
        run=true
      elif [ "$comm" == "report" ]; then
        report=true
      elif [ "$comm" == "set" ]; then
        set=true
      else
        echo "Unknown task '$comm'!" >&2
        exit 1
      fi
#      ((obligatory_param=obligatory_param+1))
      ;;
    p)
      # params for set of Flowd123d samples
      params=$OPTARG
      ;;
    x)
      # params for set of Flowd123d samples
      sample_subbir=$OPTARG
      ;;
    s)
      # params for set of Flowd123d samples
      solver_id=$OPTARG
      ;;
    c)
      # output directory
      clean="clean"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [ "$debug" == true ]; then
  echo "n_chains = $n_chains"
  echo "output_dir = $output_dir"
  echo "visualize = $visualize"
  echo "run = $run"
  echo "set = $set"
  echo "clean = $clean"
  echo "params = $params"
  echo "sample_subbir = $sample_subbir"
  echo "solver_id = $solver_id"
fi

#if [[ $obligatory_param -lt 3 ]]; then
#  echo "Not all obligatory parameters set!"
#  exit 1
#fi


sif_image="${ENDORSE_SRC_ROOT}/endorse.sif"

# singulairity part
sing_command="singularity exec -B ${ENDORSE_SRC_ROOT}:${ENDORSE_SRC_ROOT} ${sif_image}"
venv_command="source ${ENDORSE_VENV_BAYES}/bin/activate"

# select task
# run all
if [ "$run" == true ]; then
  command="$venv_command && python3 -m mpi4py ${ENDORSE_SRC_BAYES}/run_all.py ${output_dir} $n_chains $clean"
fi

# visualize
if [ "$visualize" == true ]; then
  command="$venv_command && python3 ${ENDORSE_SRC_BAYES}/run_all.py $output_dir $n_chains '' visualize"
fi

# set of Flow123d samples
if [ "$set" == true ]; then
  command="$venv_command && python3 ${ENDORSE_SRC_BAYES}/run_set_flow123d.py $output_dir $params $sample_subbir $solver_id"
fi

# report
if [ "$report" == true ]; then
  command="$venv_command && python3 ${ENDORSE_SRC_BAYES}/make_results_report.py $output_dir"
  eval "${command}"
  exit 0
fi


# finalize command
final_command="${sing_command} bash -c \"${command}\""
echo "${final_command}"

if [ "$debug" == false ]; then
  eval "${final_command}"

  if [ "$run" == true ]; then
    qsub "${output_dir}/pbs_job.sh"
  fi
fi
